# Stage 1: Build base image
FROM python:3.12.11-alpine3.22 AS base

ENV GIT_VERSION=2.50.0

RUN <<EOF
    apk add --update --no-cache git

    apk add --no-cache --virtual .build-deps \
    build-base \
    autoconf \
    linux-headers \
    perl \
    perl-dev \
    openssl-dev \
    zlib-dev \
    gettext-dev \
    curl-dev \
    expat-dev

    cd /tmp && \
    wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-${GIT_VERSION}.tar.gz && \
    tar -xzf git-${GIT_VERSION}.tar.gz && \
    rm git-${GIT_VERSION}.tar.gz && \
    cd git-${GIT_VERSION}

    mkdir -p /opt/git && \
    make configure && \
    ./configure --prefix=/opt/git && \
    make all && \
    make install
EOF

# Stage 2: Final base image
FROM python:3.12-alpine AS final_base
COPY --from=base /opt/git /opt/git
ENV PATH="/opt/git/bin:${PATH}"
ENV LD_LIBRARY_PATH="/opt/git/lib"

CMD ["python3"]

# Stage 3: Application build image
FROM python:3.12-alpine AS builder
COPY --from=final_base /opt/git /opt/git
ENV PATH="/opt/git/bin:${PATH}"
ENV LD_LIBRARY_PATH="/opt/git/lib"
COPY pyproject.toml poetry.lock* /project/
COPY src/ /project/src/
COPY src /app
WORKDIR /project
RUN pip install poetry && \
    poetry self add poetry-plugin-export && \
    poetry export --without-hashes -f requirements.txt -o /app/requirements.txt && \
    pip install --no-cache-dir --target /app -r /app/requirements.txt

# Stage 4: Final application image
FROM python:3.12-alpine AS final
COPY --from=builder /opt/git /opt/git
COPY --from=builder /app /app
ENV PATH="/opt/git/bin:${PATH}"
ENV LD_LIBRARY_PATH="/opt/git/lib"
ENV PYTHONPATH=/app
WORKDIR /app
ENTRYPOINT ["python", "-m", "daily_report.main"]
